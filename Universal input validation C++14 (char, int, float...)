// OBJECTIVE
// This function demands user input and validates it. 
// The aim is to make code within the body of our program
// as clean as possible.

// ARGUMENTS
// 1. The first argument is a pointer to the variable in which 
// the input is to be stored. 
// 2. The second argument is the name of a lambda function like
//        auto conditions = [](auto foo) { return foo != 0; };
// where foo != 0 is a sample statement.
// If there are not particular conditions that must be met,
// make the lambda function return true.
// 3. The third argument is the string that contains the message
// sent to the user, e.g. "Enter x: ".

// USE
// Everytime user input is required, follow these steps:
// 1. Declare the variable in which the input is to be stored.
// 2. Declare an auto lambda function that returns true if conditions 
//    are met, or make it return true if there are no conditions.
// 3. Call input_validation(&variable, conditions, message).

// PRACTICALITY
// Observe that, using this style, it takes t+l+n lines of code
// to get and validate user input, where t is the number of diferent types
// of the variables, l is the number of different lambda functions, and 
// n is the number of inputs. t and l can be at most n, and at least 1. 
// Hence, this style takes at least 2+n lines of code and, at most, 3n.
// A header file with this function is just 16 lines.

// EXAMPLE
// double x;
// auto x_validity = [](auto foo) { return foo != 0; };
// input_validation(&x, x_validity, "Enter x: ");

// CODE
#ifndef __INPUT_VALIDATION_H // Header guards
#define __INPUT_VALIDATION_H

#include <iostream>
#include <limits>

template<class TYPE, class LAMBDA> // Generic types (TYPE is a pointer and LAMBDA is a lambda function)
void input_validation(TYPE input, LAMBDA conditions, std::string message) {
    while (1) {
        std::cout << message; // Print a string (UI)
        std::cin >> *input;   // Asign user input to the value of the given pointer
        if (std::cin.fail() || std::cin.get() != '\n') { // If input is invalid (has another type than requested)
            std::cin.clear(); // Clean the flag of cin.fail
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Erase spurious chars
            std::cout << " ERROR:Invalid input.\n\n"; 
        }
        else if (!conditions(*input)) { // If conditions for validity are not met
            std::cout << " ERROR:Invalid value.\n\n";
        }
        else break;
    }
}

#endif

// KNOWN BUGS
//    -- If the variable is unsigned and the user input is a minus sign with a few numbers,
//       cin stores the unsigned number entered.
