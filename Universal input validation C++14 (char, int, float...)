// OBJECTIVE
// This function demands user input and validates it. 
// The aim is to make code within the body of our program
// as clean as possible. Aimed to work with simple types  
// such as char, std::string, int, float and double, including
// signed and unsigned types.

// ARGUMENTS
// The first argument is the variable in which the input is
// to be stored. The second argument is a the name of a 
// lambda function of the form 
//        auto conditions = [](auto foo) { return foo != 0; };
// where foo != 0 is a sample statement.
// If there are not particular conditions that must be met,
// make the lambda function return true.
// The third argument is the string that contains the message
// sent to the user, which in general is "Enter x: ".

// USE
// Everytime user input is required, follow these steps:
// 1. Declare and initialize the variable. Initialization is required!
// 2. Declare an auto lambda function that returns true if conditions are met.
// 3. Call input_validation(variable, conditions, message).
// Observe that this way we can get and validate user input with, at most,
// three lines of code. Remember to make the lambda return true 
// if no conditions are to be satisfied. Never inline this function.

// EXAMPLE
// double x = 0;
// auto x_validity = [](auto foo) { return foo != 0; };
// input_validation(x, x_validity, "Enter x: ");

// CODE
#ifndef __INPUT_VALIDATION_H
#define __INPUT_VALIDATION_H

#include <iostream>
#include <limits>

template<class TYPE, class LAMBDA>
void input_validation(TYPE input, LAMBDA conditions, std::string message) {
    while (1) {
        std::cout << message;
        std::cin >> input;
        if (std::cin.fail() || std::cin.get() != '\n') {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cout << " ERROR:Invalid input.\n\n";
        }
        else if (!conditions(input)) {
            std::cout << " ERROR:Invalid value.\n\n";
        }
        else break;
    }
}

#endif
// KNOWN BUGS
//    -- If the variable is unsigned and the user input is a minus sign with a few numbers,
//       (e.g. -123456789) cin stores the unsigned number entered (123456789).
