// OBJECTIVE
// This function demands user input and validates it. 
// The aim is to make code within the body of our program
// as clean as possible.

// ARGUMENTS
// 1. The first argument is a pointer to the variable in which 
// the input is to be stored. 
// 2. The second argument is the name of a lambda function like
//        auto conditions = [](auto foo) { return foo != 0; };
// where foo != 0 is a sample statement.
// If there are not particular conditions that must be met,
// make the lambda function return true, just like
//              [](auto foo) { return true; }
// 3. The third argument is the string that contains the message
// sent to the user, e.g. "Enter x: ".

// USE
// Everytime user input is required, follow these steps:
// 1. Declare the variable in which the input is to be stored.
//    Never declare the variable as a char. Use std::string instead.
// 2. Call input_validation(&variable, [](auto foo) { return conditions; }, message).

// EXAMPLE
// double x;
// input_validation(&x, 
//          [](auto foo) { return foo != 0; }, 
//          "Enter x: ");

// PRACTICALITY
// Using the header file and this style, if n is the # of variables
// which are to be obtained and validated, it takes at least 3n + 1
// and at most 4n lines of code to validate them all.
// A similar input and validation method would take between 
// 14n + 1 and 15n. 
// The reduction in lines of code is around 75%.

// CODE
#ifndef __INPUT_VALIDATION_H // Header guards
#define __INPUT_VALIDATION_H

#include <iostream>
#include <limits>

template<typename Type, class UnaryPredicate> 
void input_validation(Type * input, 
            UnaryPredicate conditions, 
            std::string message) {
    while (1) {
        // Print a string in console asking for input
        std::cout << message;
        // Assign user input to the value of the given pointer
        std::cin >> *input;
        // If input is invalid (has another type than requested)
        if (std::cin.fail() || std::cin.get() != '\n') {
            // Clean the flag of cin.fail
            std::cin.clear();
            // Erase spurious chars from input buffer
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); 
            std::cout << " ERROR: Invalid input.\n\n"; 
        }
        // If specified conditions for validity are not met
        else if (!conditions(*input)) { 
            std::cout << " ERROR: Invalid value.\n\n";
        }
        // If input is valid and 
        else break;
    }
}

#endif

// KNOWN BUGS
//    -- If the variable is unsigned and the user input is a minus sign with a few numbers,
//       cin stores the unsigned number entered.
